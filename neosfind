#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  neofind
#  
#  Copyright 2015 Rodolfo Leibner <rleibner@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
'''     TODO: Breve descripción.
                Modo de uso.
            usage:  $ ./neosfind [options] fitfolder_path
            
            example:
'''


def main(options, fitfolder):
    tmpfolder = "./tmp/"
    framelist = [f for f in os.listdir(tmpfolder[:-1]) if f[:5]=="frame"]
    if not options.kill:
        anim = ""
        if options.verbose and len(framelist) > 1:
            anim = raw_input("Have %i frames yet. Make animation or delete them? [m/d] " %(len(framelist))).upper()
        if anim == "M" or (not options.verbose and len(framelist) > 1):
                print "Making animation ...",
                t0 = dt.datetime.now()
                os.system("apngasm anima.png ./tmp/frame_001.png 1 4")
                print 26*" "+str(dt.datetime.now()-t0)[:-7]
                print "Done. You can view anima.png with Firefox browser."
                raise SystemExit
        # else, delete tmp/frames:
    for f in framelist:
        os.remove(tmpfolder+f)

    fitfolder = os.path.expanduser(fitfolder)+"/"
    print "Procesing %s*.fit files..." %(fitfolder)
    t0 = dt.datetime.now()
    
    # 1) Verificar integridad de imagenes FIT :
    filelist, exclude = Checkfits(fitfolder,sorted(os.listdir(fitfolder[:-1])) , log=False)
    print dt.datetime.now()-t0
    print
    # 2) Calcular alineación de imagenes FIT :
    print "Aligning images..." 
    t0 = dt.datetime.now()
    Align = {}  # Diccionario "filename : (dy,dx)"
    if os.path.exists(fitfolder+"align.log"):
        if options.verbose:
            alog = raw_input("Have an 'align.log' yet. Should we use it? [y/n] ").upper()
            if alog == "Y":
                options.align = False
            else:
                options.align = True
        if not options.align:
            log = open(fitfolder+"align.log", "r")
            Align = eval(log.readline())
            log.close()
        
    cant = 0
    for filename in filelist:
        update_progress(cant,len(filelist))
        print str(dt.datetime.now()-t0)[:-7],
        if filename in exclude:
            continue        # -- exclude file
    
        cant += 1
        f = fitfolder+filename
        meta, data = Getdata(f)
        png = Fit2png(data) # auto equalization
    # Uso primera imagen como base para alinear -----------
        if cant == 1:
            refs1 = FindRefs(data)
            draft1 = Fit2png(data,i0=1,i1=1,sharp=1) # draft equalization
            draftsum = draft1.copy()
            meta1 = meta
            obs = meta1[1]+"_"+meta1[0][:10]
            png1 = png.copy()
            continue
            
        draft = Fit2png(data,i0=1,i1=1,sharp=1) # draft equalization
        if filename in Align.keys():
            tn = Align[filename]
        else:
            refs = FindRefs(data)
            tn = ChooseBestAlign(draft1,draft,refs1-refs)
            Align[filename] = tuple(tn)
        
        #  Superponer imágenes :
        draftsum = np.maximum(Shift(draft,dy=tn[0],dx=tn[1]), draftsum)
    # Guardo Align para el futuro
    log = open(fitfolder+"align.log", "w")
    log.write(str(Align)+"\n")
    log.close()
    # y guardo ultima:
    


    print
    t0 = dt.datetime.now()
    print "Recognizing ... ",

    # 3) Reconocer componentes sospechosos :
    im = Image.fromarray(draftsum)
    im.save(tmpfolder+"draft.png")
    dim = 25
    comp = []
    while dim>8 and len(comp) < 1:
        comp = recognize(tmpfolder+"draft.png", dim)
        dim -= 1

    if len(comp) == 0:
        print
        print "Nothing found."
        raise SystemExit
    
    # 4) Poner colores y mostrar :
    s = Image.fromarray(Shift(png,dy=tn[0],dx=tn[1]))
    r = s.copy()
    g = s.copy()
    
    for (y0, y1, x0, x1) in comp:
        xy = (x0-10,y0-10,x1+10,y1+10)
        ImageDraw.Draw(g).ellipse(xy, fill=None, outline=200)
        trace = im.crop((x0,y0, x1,y1)) # tomo traza del draft
        g.paste(trace, (x0,y0, x1,y1))  # pego en verde
        
    ImageDraw.Draw(r).text((10, 10), "desde "+ meta1[0][:10]+"  "+
        meta1[0][11:], fill=190)
    ImageDraw.Draw(r).text((10, 25), "hasta "+ meta[0][:10]+"  "+
        meta[0][11:], fill=190)

    b = r.copy()
    im = Image.merge("RGB", (r,g,b))
    im.save(tmpfolder+"%s.png"%(obs))
    print 30*" "+str(dt.datetime.now()-t0)[:-7]
    print 
    # Show image
    print "Found !"
    print "Showing draft:"
    print
    os.system("eog %s%s.png &"%(tmpfolder,obs)) 

    # 5) Generar frames :
    if options.verbose:
        frames = raw_input("Save frames ? [y/n] ").upper()
        if frames == "Y":
            cada = int(raw_input("  From %i fit images, save 1 in n:  n = " %(cant)))
            options.frames = cada
        else:
            options.frames = 0
            
    if options.frames > 0:
        txt0 = ((5,5),"obs.: %s  %s" %(meta1[1],meta1[0][:10]),"YELLOW")
        txt01 = ((5,17),"center: RA = %s  ; DEC = %s" %(meta1[2],meta1[3]),"YELLOW")
        # posicion inicial:
        (y0, y1, x0, x1) = comp[0]
        i,j = np.unravel_index(png1[y0:y1,x0:x1].argmax(), png1[y0:y1,x0:x1].shape)
        # posicion final:
        png = Shift(draft,dy=tn[0],dx=tn[1])
        u,v = np.unravel_index(png[y0:y1,x0:x1].argmax(), png[y0:y1,x0:x1].shape)
        # veloc. aparente = distancia recorrida / tiempo
        delta = 1.93 * ((u-i)**2 + (v-j)**2)**.5 # en segundos de arco.
        vel = round(3600*delta / (hhmmss2s(meta[0][-8:]) - hhmmss2s(meta1[0][-8:])),2)
        # posiciones para textos:
        if i>u:
            inic = (x0+j, y1+15)
            fin = (x0+v, y0-30)
        else:
            inic = (x0+j, y0-30)
            fin = (x0+v, y1+15)
            
        txt1 = (inic, " from "+ meta1[0][11:], "ORANGE")
        txt2 = (fin, " to "+ meta[0][11:], "ORANGE")
        txt3 = ((50+x0+max(j,v),(y0+y1)/2-5), ' app.speed: %s arc"/h' %(vel), "BROWN")
        
        rgb = Array2rgb(png1,comp,[txt0,txt01,txt1,txt3] )
        rgb.save(tmpfolder+"frame_001.png")
        os.system("optipng -o2 -q %sframe_001.png"%(tmpfolder)) 
        t0 = dt.datetime.now()
        print "Saving png frames ... "
    
        n = 1
        for f in range(options.frames,cant, options.frames):
            update_progress(f,cant)
            print str(dt.datetime.now()-t0)[:-7],
    
            meta, data = Getdata(fitfolder+filelist[f])
            png = Fit2png(data) # auto equalization
            # get shift
            tn = Align[filelist[f]]
            png = Shift(png,dy=tn[0],dx=tn[1])
            # choose text
            if f < cant/2 :
                rgb = Array2rgb(png,comp,[txt0,txt01,txt1,txt3] )
            else:
                rgb = Array2rgb(png,comp,[txt0,txt01,txt2,txt3] )
            
            n += 1
            rgb.save(tmpfolder+"frame_%s.png" %(("00"+str(n))[-3:]))
            os.system("optipng -o2 -q %sframe_%s.png"%(tmpfolder,("00"+str(n))[-3:])) 
        print
        
    print "Done."

    # 6) Generar animacion :
    if options.verbose:
        anim = raw_input("Make animation.apng ? [y/n] ").upper()
        if anim == "Y":
            options.nomovie = False
        else:
            options.nomovie = True
            
    if not options.nomovie:
        print
        print "Making animation ...",
        t0 = dt.datetime.now()
        os.system("apngasm %s.apng ./tmp/frame_001.png 1 4"%(obs))
        print 26*" "+str(dt.datetime.now()-t0)[:-7]
        print "Done. You can view anima.png with Firefox browser."
        #~ os.system("firefox ./%s.apng &"%(obs))
        
    return 0

if __name__ == '__main__':
    import numpy as np
    from PIL import Image , ImageDraw
    import os, datetime as dt
    from astrotools import *
    from recognize import recognize
    from optparse import OptionParser

    """
    Parses command line and edit the file
    """
    # create the options we want to parse
    usage = " %prog [opciones] arch_entrada arch_salida"
    optParser = OptionParser(usage=usage)
    optParser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Verbose for interactive options.")
    optParser.add_option("-m", "--nomovie", action="store_true", dest="nomovie", default=False,
                        help="Do no animation.")
    optParser.add_option("-a", "--align", action="store_true", dest="align", default=False,
                        help="Force align calculation, even existing align.log values.")
    optParser.add_option("-f", "--frames", type="int", dest="frames", metavar="n", default=4,
                        help="Saves one frame in n, skips (n-1).")
    optParser.add_option("-k", "--kill", action="store_true", dest="kill", default=False,
                        help="Kill (delete) all previous frames.")
    #  optParser.add_option("-k", "--keep-front", type="int", dest="keepfront", metavar="NUM",
    #                        help="Keeps only NUM of characters from the front of the filename")
    #  optParser.add_option("-b", "--trim-back", type="int", dest="trimback", metavar="NUM",
    #                        help="Trims NUM of characters from the back of the filename")
    #~ optParser.add_option("-e", "--escalar", type="float", dest="escalar", metavar="NN",
                        #~ help="Escala tiempos al NN%")
    #~ optParser.add_option("-r", "--renum", action="store_true", dest="renum", default=False,
                        #~ help="Renumera todo")
    #~ optParser.add_option("-c", "--check", action="store_true", dest="check", default=False,
                        #~ help="verifica todo")
    (options, args) = optParser.parse_args()
    
      # check that they passed in atleast fitfolder
    if len(args) > 0:
        fitfolder = args[0]
    else:
        optParser.error("usage: $ ./neosfind [options] fitfolder")

    main(options, fitfolder)

